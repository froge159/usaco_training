import java.util.*;
import java.io.*;

class Make24 {
    static int count = 0;
    static void solve(int[] nums, int res, int idx) {
        if (idx == nums.length - 1) {
            loop(nums,res);
        }
        for (int i = idx; i < nums.length; i++) {
            swap(nums, idx, i);
            solve(nums, res, idx + 1);
            swap(nums, idx, i);
        }
    }
    static void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    } 
    static void loop(int[] nums, int res) {
        // + - * /
        for (int i = 0; i < 4; i++) {
            double result = nums[0];
            result = operate(nums, i, result, 1);
            for (int j = 0; j < 4; j++) {
                result = operate(nums, j, result, 2);
                for (int k = 0; k < 4; k++) {
                    result = operate(nums, k, result, 3);
                }
            }
            if (result == res) {count++; break;}
        }
    }
    static double operate(int[] nums, int index, double result, int currIndex) {
        if (index == 0) return result + nums[currIndex];
        if (index == 1) return result - nums[currIndex];
        if (index == 2) return result * nums[currIndex];
        else return result / nums[currIndex];
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            int d = Integer.parseInt(st.nextToken());
            int res = Integer.parseInt(st.nextToken());
            int[] nums = {a, b, c, d};
            solve(nums, res, 0);
        }
        pw.println(count);
        pw.close();
    }
}
